{"version":3,"sources":["actions/index.js","components/navbar/navbar.js","components/content/addReminder.js","components/content/content.js","reducers/navbar.js","reducers/reminders.js","reducers/index.js","index.js"],"names":["receiveReminders","reminders","console","log","type","Navbar","_ref","reloadHome","isLoading","remindersCount","react_default","a","createElement","className","onClick","IosRefresh_default","fontSize","color","rotate","connect","state","navbar","list","length","dispatch","AddReminderInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeypress","bind","assertThisInitialized","handleChange","handleContainerClick","inputRef","React","createRef","e","reminderBlank","target","value","key","addReminder","s","trim","updateNewReminder","current","focus","ref","placeholder","onKeyPress","onChange","addReminderValue","Component","newReminderValue","Content","fetchRemindersCall","remindersElements","remindersList","map","reminder","i","id","content","content_addReminder","fetch","then","res","json","error","initialState","arguments","undefined","objectSpread","action","concat","toConsumableArray","recall5RootReducer","combineReducers","store","createStore","reducer","applyMiddleware","thunkMiddleware","rootElement","document","getElementById","ReactDOM","render","es","navbar_navbar"],"mappings":"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","file":"static/js/main.ecfd89fd.chunk.js","sourcesContent":["import fetch from \"cross-fetch\";\n\nexport const reloadHome = () => {\n  return {\n    type: \"RELOAD_HOME\"\n  };\n};\n\nexport const fetchReminders = () => {\n  return {\n    type: \"FETCH_REMINDERS\"\n  };\n};\n\nexport const receiveReminders = reminders => {\n  console.log(\"In receiveReminder action\");\n  return {\n    type: \"RECEIVE_REMINDERS\",\n    reminders\n  };\n};\n\nexport const updateNewReminder = newReminderValue => {\n  return {\n    type: \"UPDATE_NEW_REMINDER\",\n    newReminderValue\n  };\n};\n\nexport const addReminder = () => {\n  return {\n    type: \"ADD_REMINDER\"\n  };\n};\n\n// ASYNC FUNCTIONS\nexport function fetchRemindersCall() {\n  console.log(\"Calling fetch reminders call\");\n  return dispatch => {\n    fetch(\"https://recall5--rdromao.repl.co/reminders\")\n      .then(res => res.json())\n      .then(json => dispatch(receiveReminders(json)))\n      .then(error => console.log(error));\n  };\n  /*return dispatch => {\n    console.log(\"Dispatching receiveReminders\");\n    dispatch(receiveReminders([\"uno\", \"dos\"]));\n  };*/\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { reloadHome } from \"../../actions\";\nimport IosRefresh from \"react-ionicons/lib/IosRefresh\";\n\nlet Navbar = ({ reloadHome, isLoading, remindersCount }) => (\n  <div className=\"navbarContainer\">\n    <div className=\"navbarTitle\" onClick={() => reloadHome()}>\n      recall5 {remindersCount && remindersCount}{\" \"}\n      {isLoading && <IosRefresh fontSize=\"24px\" color=\"#fff\" rotate={true} />}\n    </div>\n  </div>\n);\n\nconst mapDispatchToProps = dispatch => ({\n  reloadHome: () => {\n    dispatch(reloadHome());\n  }\n});\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.navbar.isLoading,\n    remindersCount: state.reminders.list.length\n  };\n};\n\nNavbar = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Navbar);\nexport default Navbar;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateNewReminder, addReminder } from \"../../actions\";\n\nclass AddReminderInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeypress = this.handleKeypress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleContainerClick = this.handleContainerClick.bind(this);\n    this.inputRef = React.createRef();\n  }\n\n  handleKeypress(e) {\n    // If pressed enter with something written in the\n    // input box, submit it, else just update value\n    if (!this.reminderBlank(e.target.value) && e.key === \"Enter\") {\n      console.log(\"Enter key was pressed and theres something written\");\n      this.props.addReminder();\n    }\n  }\n\n  reminderBlank(s) {\n    return !s || s.length === 0 || !s.trim();\n  }\n\n  handleChange(e) {\n    this.props.updateNewReminder(e.target.value);\n  }\n\n  handleContainerClick() {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"reminderContainer\" onClick={this.handleContainerClick}>\n        <input\n          type=\"text\"\n          ref={this.inputRef}\n          className=\"newReminderInput textMuted\"\n          placeholder=\"Add a reminderâ€¦\"\n          onKeyPress={this.handleKeypress}\n          onChange={this.handleChange}\n          value={this.props.addReminderValue}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateNewReminder: newReminderValue => {\n    console.log(\"New reminder value from component: \");\n    console.log(newReminderValue);\n    dispatch(updateNewReminder(newReminderValue));\n  },\n  addReminder: () => {\n    console.log(\"Add new reminder to list\");\n    dispatch(addReminder());\n  }\n});\n\nconst mapStateToProps = state => {\n  return {\n    addReminderValue: state.reminders.addReminderValue\n  };\n};\n\nAddReminderInput = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AddReminderInput);\nexport default AddReminderInput;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { reloadHome } from \"../../actions\";\nimport { fetchRemindersCall } from \"../../actions\";\nimport AddReminderInput from \"./addReminder\";\n\nclass Content extends React.Component {\n  componentDidMount() {\n    this.props.fetchRemindersCall();\n  }\n\n  render() {\n    let remindersElements = this.props.remindersList.map((reminder, i) => (\n      <div key={reminder.id} className=\"reminderContainer\">\n        {reminder.content}\n      </div>\n    ));\n\n    return (\n      <div>\n        <div className=\"contentContainer\">\n          {remindersElements}\n          <AddReminderInput />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  reloadHome: () => {\n    dispatch(reloadHome());\n  },\n  fetchRemindersCall: () => {\n    dispatch(fetchRemindersCall());\n  }\n});\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.navbar.isLoading,\n    remindersList: state.reminders.list\n  };\n};\n\nContent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Content);\nexport default Content;\n","const initialState = {\n  isLoading: true\n};\n\nconst navbar = (state = initialState, action) => {\n  switch (action.type) {\n    case \"RELOAD_HOME\":\n      return {\n        ...state,\n        isLoading: !state.isLoading\n      };\n    default:\n      return state;\n  }\n};\n\nexport default navbar;\n","const initialState = {\n  isLoading: true,\n  list: [\n    /*\n    \"Videoconferencia Amaris maÃ±ana jueves 14/02 a las 12 por Skype\",\n    \"ITALO MANDÃ“ LA PRUEBA? PONERME CON ESO\",\n    \"Ir a la USB: recaudos Programa y PÃ©nsum y entregar en DACE junto a comprobante de pago\",\n    \"Buscarle precios solidarios de CPU a la mamÃ¡ de la beba\"*/\n  ],\n  addReminderValue: \"\"\n};\n\nconst reminders = (state = initialState, action) => {\n  console.log(\"In reminders reducer\");\n  switch (action.type) {\n    case \"FETCH_REMINDERS\":\n      console.log(\"Fetching!!!..\");\n      return {\n        ...state,\n        isLoading: true\n      };\n    case \"RECEIVE_REMINDERS\":\n      console.log(\"Reminders fetched: \");\n      console.log(state.list);\n      return {\n        ...state,\n        isLoading: false,\n        list: action.reminders\n      };\n    case \"UPDATE_NEW_REMINDER\":\n      return {\n        ...state,\n        addReminderValue: action.newReminderValue\n      };\n    case \"ADD_REMINDER\":\n      return {\n        ...state,\n        list: [...state.list, state.addReminderValue],\n        addReminderValue: initialState.addReminderValue\n      };\n    default:\n      console.log(\"In reminders reducer default. Nothing to do\");\n      return state;\n  }\n};\n\nexport default reminders;\n","import { combineReducers } from \"redux\";\nimport navbar from \"./navbar\";\nimport reminders from \"./reminders\";\n\nconst recall5RootReducer = combineReducers({\n  navbar,\n  reminders\n});\n\nexport default recall5RootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Navbar from \"./components/navbar/navbar\";\nimport Content from \"./components/content/content\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nimport \"./css/styles.css\";\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Navbar />\n      <Content />\n    </Provider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}